// Copyright 2017 Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `General_Category=Modifier_Symbol`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v9.0.0
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	const CHUNK_SIZE = 10000;
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		const codePoints = [];
		for (let length = 0, codePoint = start; codePoint <= end; codePoint++) {
			codePoints[length++] = codePoint;
			if (length === CHUNK_SIZE) {
				result += String.fromCodePoint(...codePoints);
				codePoints.length = length = 0;
			}
		}
		result += String.fromCodePoint(...codePoints);
	}
	return result;
};

const matchSymbols = buildString({
	loneCodePoints: [
		0x00005E,
		0x000060,
		0x0000A8,
		0x0000AF,
		0x0000B4,
		0x0000B8,
		0x0002ED,
		0x000375,
		0x001FBD,
		0x00AB5B,
		0x00FF3E,
		0x00FF40,
		0x00FFE3
	],
	ranges: [
		[0x0002C2, 0x0002C5],
		[0x0002D2, 0x0002DF],
		[0x0002E5, 0x0002EB],
		[0x0002EF, 0x0002FF],
		[0x000384, 0x000385],
		[0x001FBF, 0x001FC1],
		[0x001FCD, 0x001FCF],
		[0x001FDD, 0x001FDF],
		[0x001FED, 0x001FEF],
		[0x001FFD, 0x001FFE],
		[0x00309B, 0x00309C],
		[0x00A700, 0x00A716],
		[0x00A720, 0x00A721],
		[0x00A789, 0x00A78A],
		[0x00FBB2, 0x00FBC1],
		[0x01F3FB, 0x01F3FF]
	]
});
assert(
	/^\p{General_Category=Modifier_Symbol}+$/u.test(matchSymbols),
	"`\\p{General_Category=Modifier_Symbol}` matches all proper symbols"
);
assert(
	/^\p{General_Category=Sk}+$/u.test(matchSymbols),
	"`\\p{General_Category=Sk}` matches all proper symbols"
);
assert(
	/^\p{gc=Modifier_Symbol}+$/u.test(matchSymbols),
	"`\\p{gc=Modifier_Symbol}` matches all proper symbols"
);
assert(
	/^\p{gc=Sk}+$/u.test(matchSymbols),
	"`\\p{gc=Sk}` matches all proper symbols"
);
assert(
	/^\p{Modifier_Symbol}+$/u.test(matchSymbols),
	"`\\p{Modifier_Symbol}` matches all proper symbols"
);
assert(
	/^\p{Sk}+$/u.test(matchSymbols),
	"`\\p{Sk}` matches all proper symbols"
);

const nonMatchSymbols = buildString({
	loneCodePoints: [
		0x00005F,
		0x0002EC,
		0x0002EE,
		0x001FBE,
		0x00FF3F
	],
	ranges: [
		[0x000000, 0x00005D],
		[0x000061, 0x0000A7],
		[0x0000A9, 0x0000AE],
		[0x0000B0, 0x0000B3],
		[0x0000B5, 0x0000B7],
		[0x0000B9, 0x0002C1],
		[0x0002C6, 0x0002D1],
		[0x0002E0, 0x0002E4],
		[0x000300, 0x000374],
		[0x000376, 0x000383],
		[0x000386, 0x001FBC],
		[0x001FC2, 0x001FCC],
		[0x001FD0, 0x001FDC],
		[0x001FE0, 0x001FEC],
		[0x001FF0, 0x001FFC],
		[0x001FFF, 0x00309A],
		[0x00309D, 0x00A6FF],
		[0x00A717, 0x00A71F],
		[0x00A722, 0x00A788],
		[0x00A78B, 0x00AB5A],
		[0x00AB5C, 0x00FBB1],
		[0x00FBC2, 0x00FF3D],
		[0x00FF41, 0x00FFE2],
		[0x00FFE4, 0x01F3FA],
		[0x01F400, 0x10FFFF]
	]
});
assert(
	/^\P{General_Category=Modifier_Symbol}+$/u.test(nonMatchSymbols),
	"`\\P{General_Category=Modifier_Symbol}` matches all proper symbols"
);
assert(
	/^\P{General_Category=Sk}+$/u.test(nonMatchSymbols),
	"`\\P{General_Category=Sk}` matches all proper symbols"
);
assert(
	/^\P{gc=Modifier_Symbol}+$/u.test(nonMatchSymbols),
	"`\\P{gc=Modifier_Symbol}` matches all proper symbols"
);
assert(
	/^\P{gc=Sk}+$/u.test(nonMatchSymbols),
	"`\\P{gc=Sk}` matches all proper symbols"
);
assert(
	/^\P{Modifier_Symbol}+$/u.test(nonMatchSymbols),
	"`\\P{Modifier_Symbol}` matches all proper symbols"
);
assert(
	/^\P{Sk}+$/u.test(nonMatchSymbols),
	"`\\P{Sk}` matches all proper symbols"
);
