// Copyright 2017 Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `Quotation_Mark`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v9.0.0
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		for (let codePoint = start; codePoint <= end; codePoint++) {
			result += String.fromCodePoint(codePoint);
		}
	}
	return result;
};

const matchSymbols = buildString({
	loneCodePoints: [
		0x000022,
		0x000027,
		0x0000AB,
		0x0000BB,
		0x002E42,
		0x00FF02,
		0x00FF07
	],
	ranges: [
		[0x002018, 0x00201F],
		[0x002039, 0x00203A],
		[0x00300C, 0x00300F],
		[0x00301D, 0x00301F],
		[0x00FE41, 0x00FE44],
		[0x00FF62, 0x00FF63]
	]
});
assert(
	/^\p{Quotation_Mark}+$/u.test(matchSymbols),
	"`\\p{Quotation_Mark}` matches all proper symbols"
);
assert(
	/^\p{QMark}+$/u.test(matchSymbols),
	"`\\p{QMark}` matches all proper symbols"
);

const nonMatchSymbols = buildString({
	loneCodePoints: [],
	ranges: [
		[0x000000, 0x000021],
		[0x000023, 0x000026],
		[0x000028, 0x0000AA],
		[0x0000AC, 0x0000BA],
		[0x0000BC, 0x002017],
		[0x002020, 0x002038],
		[0x00203B, 0x002E41],
		[0x002E43, 0x00300B],
		[0x003010, 0x00301C],
		[0x003020, 0x00FE40],
		[0x00FE45, 0x00FF01],
		[0x00FF03, 0x00FF06],
		[0x00FF08, 0x00FF61],
		[0x00FF64, 0x10FFFF]
	]
});
assert(
	/^\P{Quotation_Mark}+$/u.test(nonMatchSymbols),
	"`\\P{Quotation_Mark}` matches all proper symbols"
);
assert(
	/^\P{QMark}+$/u.test(nonMatchSymbols),
	"`\\P{QMark}` matches all proper symbols"
);
