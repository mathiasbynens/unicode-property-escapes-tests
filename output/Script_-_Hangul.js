// Copyright 2017 Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `Script=Hangul`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v9.0.0
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	const CHUNK_SIZE = 10000;
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		const codePoints = [];
		for (let length = 0, codePoint = start; codePoint <= end; codePoint++) {
			codePoints[length++] = codePoint;
			if (length === CHUNK_SIZE) {
				result += String.fromCodePoint(...codePoints);
				codePoints.length = length = 0;
			}
		}
		result += String.fromCodePoint(...codePoints);
	}
	return result;
};

const matchSymbols = buildString({
	loneCodePoints: [],
	ranges: [
		[0x001100, 0x0011FF],
		[0x00302E, 0x00302F],
		[0x003131, 0x00318E],
		[0x003200, 0x00321E],
		[0x003260, 0x00327E],
		[0x00A960, 0x00A97C],
		[0x00AC00, 0x00D7A3],
		[0x00D7B0, 0x00D7C6],
		[0x00D7CB, 0x00D7FB],
		[0x00FFA0, 0x00FFBE],
		[0x00FFC2, 0x00FFC7],
		[0x00FFCA, 0x00FFCF],
		[0x00FFD2, 0x00FFD7],
		[0x00FFDA, 0x00FFDC]
	]
});
assert(
	/^\p{Script=Hangul}+$/u.test(matchSymbols),
	"`\\p{Script=Hangul}` matches all proper symbols"
);
assert(
	/^\p{Script=Hang}+$/u.test(matchSymbols),
	"`\\p{Script=Hang}` matches all proper symbols"
);
assert(
	/^\p{sc=Hangul}+$/u.test(matchSymbols),
	"`\\p{sc=Hangul}` matches all proper symbols"
);
assert(
	/^\p{sc=Hang}+$/u.test(matchSymbols),
	"`\\p{sc=Hang}` matches all proper symbols"
);

const nonMatchSymbols = buildString({
	loneCodePoints: [],
	ranges: [
		[0x000000, 0x0010FF],
		[0x001200, 0x00302D],
		[0x003030, 0x003130],
		[0x00318F, 0x0031FF],
		[0x00321F, 0x00325F],
		[0x00327F, 0x00A95F],
		[0x00A97D, 0x00ABFF],
		[0x00D7A4, 0x00D7AF],
		[0x00D7C7, 0x00D7CA],
		[0x00D7FC, 0x00FF9F],
		[0x00FFBF, 0x00FFC1],
		[0x00FFC8, 0x00FFC9],
		[0x00FFD0, 0x00FFD1],
		[0x00FFD8, 0x00FFD9],
		[0x00FFDD, 0x10FFFF]
	]
});
assert(
	/^\P{Script=Hangul}+$/u.test(nonMatchSymbols),
	"`\\P{Script=Hangul}` matches all proper symbols"
);
assert(
	/^\P{Script=Hang}+$/u.test(nonMatchSymbols),
	"`\\P{Script=Hang}` matches all proper symbols"
);
assert(
	/^\P{sc=Hangul}+$/u.test(nonMatchSymbols),
	"`\\P{sc=Hangul}` matches all proper symbols"
);
assert(
	/^\P{sc=Hang}+$/u.test(nonMatchSymbols),
	"`\\P{sc=Hang}` matches all proper symbols"
);
