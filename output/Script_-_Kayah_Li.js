// Copyright 2017 Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `Script=Kayah_Li`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v9.0.0
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		for (let codePoint = start; codePoint <= end; codePoint++) {
			result += String.fromCodePoint(codePoint);
		}
	}
	return result;
};

const matchSymbols = buildString({
	loneCodePoints: [
		0x00A92F
	],
	ranges: [
		[0x00A900, 0x00A92D]
	]
});
assert(
	/^\p{Script=Kayah_Li}+$/u.test(matchSymbols),
	"`\\p{Script=Kayah_Li}` matches all proper symbols"
);
assert(
	/^\p{Script=Kali}+$/u.test(matchSymbols),
	"`\\p{Script=Kali}` matches all proper symbols"
);
assert(
	/^\p{sc=Kayah_Li}+$/u.test(matchSymbols),
	"`\\p{sc=Kayah_Li}` matches all proper symbols"
);
assert(
	/^\p{sc=Kali}+$/u.test(matchSymbols),
	"`\\p{sc=Kali}` matches all proper symbols"
);

const nonMatchSymbols = buildString({
	loneCodePoints: [
		0x00A92E
	],
	ranges: [
		[0x000000, 0x00A8FF],
		[0x00A930, 0x10FFFF]
	]
});
assert(
	/^\P{Script=Kayah_Li}+$/u.test(nonMatchSymbols),
	"`\\P{Script=Kayah_Li}` matches all proper symbols"
);
assert(
	/^\P{Script=Kali}+$/u.test(nonMatchSymbols),
	"`\\P{Script=Kali}` matches all proper symbols"
);
assert(
	/^\P{sc=Kayah_Li}+$/u.test(nonMatchSymbols),
	"`\\P{sc=Kayah_Li}` matches all proper symbols"
);
assert(
	/^\P{sc=Kali}+$/u.test(nonMatchSymbols),
	"`\\P{sc=Kali}` matches all proper symbols"
);
