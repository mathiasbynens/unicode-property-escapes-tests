// Copyright 2017 Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `Script_Extensions=Bopomofo`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v9.0.0
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	const CHUNK_SIZE = 10000;
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		const codePoints = [];
		for (let length = 0, codePoint = start; codePoint <= end; codePoint++) {
			codePoints[length++] = codePoint;
			if (length === CHUNK_SIZE) {
				result += String.fromCodePoint(...codePoints);
				codePoints.length = length = 0;
			}
		}
		result += String.fromCodePoint(...codePoints);
	}
	return result;
};

const matchSymbols = buildString({
	loneCodePoints: [
		0x003030,
		0x003037,
		0x0030FB
	],
	ranges: [
		[0x0002EA, 0x0002EB],
		[0x003001, 0x003003],
		[0x003008, 0x003011],
		[0x003013, 0x00301F],
		[0x00302A, 0x00302D],
		[0x003105, 0x00312D],
		[0x0031A0, 0x0031BA],
		[0x00FE45, 0x00FE46],
		[0x00FF61, 0x00FF65]
	]
});
assert(
	/^\p{Script_Extensions=Bopomofo}+$/u.test(matchSymbols),
	"`\\p{Script_Extensions=Bopomofo}` matches all proper symbols"
);
assert(
	/^\p{Script_Extensions=Bopo}+$/u.test(matchSymbols),
	"`\\p{Script_Extensions=Bopo}` matches all proper symbols"
);
assert(
	/^\p{scx=Bopomofo}+$/u.test(matchSymbols),
	"`\\p{scx=Bopomofo}` matches all proper symbols"
);
assert(
	/^\p{scx=Bopo}+$/u.test(matchSymbols),
	"`\\p{scx=Bopo}` matches all proper symbols"
);

const nonMatchSymbols = buildString({
	loneCodePoints: [
		0x003012
	],
	ranges: [
		[0x00DC00, 0x00DFFF],
		[0x000000, 0x0002E9],
		[0x0002EC, 0x003000],
		[0x003004, 0x003007],
		[0x003020, 0x003029],
		[0x00302E, 0x00302F],
		[0x003031, 0x003036],
		[0x003038, 0x0030FA],
		[0x0030FC, 0x003104],
		[0x00312E, 0x00319F],
		[0x0031BB, 0x00DBFF],
		[0x00E000, 0x00FE44],
		[0x00FE47, 0x00FF60],
		[0x00FF66, 0x10FFFF]
	]
});
assert(
	/^\P{Script_Extensions=Bopomofo}+$/u.test(nonMatchSymbols),
	"`\\P{Script_Extensions=Bopomofo}` matches all proper symbols"
);
assert(
	/^\P{Script_Extensions=Bopo}+$/u.test(nonMatchSymbols),
	"`\\P{Script_Extensions=Bopo}` matches all proper symbols"
);
assert(
	/^\P{scx=Bopomofo}+$/u.test(nonMatchSymbols),
	"`\\P{scx=Bopomofo}` matches all proper symbols"
);
assert(
	/^\P{scx=Bopo}+$/u.test(nonMatchSymbols),
	"`\\P{scx=Bopo}` matches all proper symbols"
);
