// Copyright 2017 Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `Script_Extensions=Meetei_Mayek`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v9.0.0
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		for (let codePoint = start; codePoint <= end; codePoint++) {
			result += String.fromCodePoint(codePoint);
		}
	}
	return result;
};

const matchSymbols = buildString({
	loneCodePoints: [],
	ranges: [
		[0x00AAE0, 0x00AAF6],
		[0x00ABC0, 0x00ABED],
		[0x00ABF0, 0x00ABF9]
	]
});
assert(
	/^\p{Script_Extensions=Meetei_Mayek}+$/u.test(matchSymbols),
	"`\\p{Script_Extensions=Meetei_Mayek}` matches all proper symbols"
);
assert(
	/^\p{Script_Extensions=Mtei}+$/u.test(matchSymbols),
	"`\\p{Script_Extensions=Mtei}` matches all proper symbols"
);
assert(
	/^\p{scx=Meetei_Mayek}+$/u.test(matchSymbols),
	"`\\p{scx=Meetei_Mayek}` matches all proper symbols"
);
assert(
	/^\p{scx=Mtei}+$/u.test(matchSymbols),
	"`\\p{scx=Mtei}` matches all proper symbols"
);

const nonMatchSymbols = buildString({
	loneCodePoints: [],
	ranges: [
		[0x000000, 0x00AADF],
		[0x00AAF7, 0x00ABBF],
		[0x00ABEE, 0x00ABEF],
		[0x00ABFA, 0x10FFFF]
	]
});
assert(
	/^\P{Script_Extensions=Meetei_Mayek}+$/u.test(nonMatchSymbols),
	"`\\P{Script_Extensions=Meetei_Mayek}` matches all proper symbols"
);
assert(
	/^\P{Script_Extensions=Mtei}+$/u.test(nonMatchSymbols),
	"`\\P{Script_Extensions=Mtei}` matches all proper symbols"
);
assert(
	/^\P{scx=Meetei_Mayek}+$/u.test(nonMatchSymbols),
	"`\\P{scx=Meetei_Mayek}` matches all proper symbols"
);
assert(
	/^\P{scx=Mtei}+$/u.test(nonMatchSymbols),
	"`\\P{scx=Mtei}` matches all proper symbols"
);
