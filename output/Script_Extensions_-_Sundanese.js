// Copyright 2017 Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `Script_Extensions=Sundanese`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v9.0.0
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		for (let codePoint = start; codePoint <= end; codePoint++) {
			result += String.fromCodePoint(codePoint);
		}
	}
	return result;
};

const matchSymbols = buildString({
	loneCodePoints: [],
	ranges: [
		[0x001B80, 0x001BBF],
		[0x001CC0, 0x001CC7]
	]
});
assert(
	/^\p{Script_Extensions=Sundanese}+$/u.test(matchSymbols),
	"`\\p{Script_Extensions=Sundanese}` matches all proper symbols"
);
assert(
	/^\p{Script_Extensions=Sund}+$/u.test(matchSymbols),
	"`\\p{Script_Extensions=Sund}` matches all proper symbols"
);
assert(
	/^\p{scx=Sundanese}+$/u.test(matchSymbols),
	"`\\p{scx=Sundanese}` matches all proper symbols"
);
assert(
	/^\p{scx=Sund}+$/u.test(matchSymbols),
	"`\\p{scx=Sund}` matches all proper symbols"
);

const nonMatchSymbols = buildString({
	loneCodePoints: [],
	ranges: [
		[0x000000, 0x001B7F],
		[0x001BC0, 0x001CBF],
		[0x001CC8, 0x10FFFF]
	]
});
assert(
	/^\P{Script_Extensions=Sundanese}+$/u.test(nonMatchSymbols),
	"`\\P{Script_Extensions=Sundanese}` matches all proper symbols"
);
assert(
	/^\P{Script_Extensions=Sund}+$/u.test(nonMatchSymbols),
	"`\\P{Script_Extensions=Sund}` matches all proper symbols"
);
assert(
	/^\P{scx=Sundanese}+$/u.test(nonMatchSymbols),
	"`\\P{scx=Sundanese}` matches all proper symbols"
);
assert(
	/^\P{scx=Sund}+$/u.test(nonMatchSymbols),
	"`\\P{scx=Sund}` matches all proper symbols"
);
