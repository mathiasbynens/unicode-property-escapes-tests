// Copyright <% print(new Date().getFullYear()) %> Mathias Bynens. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
author: Mathias Bynens
description: >
  Unicode property escapes for `<%= mainExpression %>`
info: |
  Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests
  Unicode v<%= unicodeVersion %>
esid: sec-static-semantics-unicodematchproperty-p
features: [regexp-unicode-property-escapes]
---*/

const buildString = ({ loneCodePoints, ranges }) => {
	let result = String.fromCodePoint(...loneCodePoints);
	for (const [start, end] of ranges) {
		for (let codePoint = start; codePoint <= end; codePoint++) {
			result += String.fromCodePoint(codePoint);
		}
	}
	return result;
};

const matchSymbols = buildString(<%= matchSymbols %>);
<% for (const expression of expressions) { %>assert(
	/^\p{<%= expression %>}+$/u.test(matchSymbols),
	"\\p{<%= expression %>} matches all proper symbols"
);
<% } %>
<% if (nonMatchSymbols) { %>
const nonMatchSymbols = buildString(<%= nonMatchSymbols %>);
<%
	for (const expression of expressions) {
%>assert(
	/^\P{<%= expression %>}+$/u.test(nonMatchSymbols),
	"\\P{<%= expression %>} matches all proper symbols"
);
<%
	}
}
%>
